###################################################################################################
# This is a short config file for testing the injection of ngmix catalog objects into existing fits
# images as part of the Y3 Balrog pipeline. No promises are made (yet) for its completeness or
# working state!
#
# Balrog yaml files are slightly different than their normal GalSim counterparts. It cannot be run
# with a standard galsim executable of the form `galsim balrog_config.yaml`; instead, it is passed
# as an input to the python script `balrog_injection.py`. This serves as the base of a multi-output
# yaml file that all of the individual chip simulations will inherit from. Do not set any fields or
# variables here that are not universal.
#
# Spencer Everett
# USCS
# 1/30/2018
###################################################################################################

modules :
  - galsim.des
  - injector
  - des_star_catalog
  - input_cosmos_chromatic
  - scene_chromatic
  - cosmos_chromatic_stamp

# These variables are not directly processed by GalSim; this simply allows a convenient way
# to change multiple variable instances quickly throughout the config file.
some_variables :
  # Pick a maximum fft size
  #- &max_fft 65536
  # - &max_fft 32768
  # - &max_fft 16384
  # - &max_fft 8192
  - &max_fft 4096 # GalSim default (likely want higher)
  # - &max_fft 64 # For testing purposes!
  - &bal_dir '/Users/jemcclea/Research/Balrog-GalSim/'
  - &cosmos_dir '/Users/jemcclea/Software/GalSim/examples/data/'
  - &cosmos_file 'real_galaxy_catalog_23.5_example.fits'
  - &filter_dir '/Users/jemcclea/Research/Balrog-GalSim/inputs/filters'

# Define the input files
input :
    cosmos_chromatic_catalog :
      # Replace with your desired ngmix catalog!
      dir : *cosmos_dir
      file_name : *cosmos_file
      use_filter_tables : True
      filter_dir : *filter_dir
      
      # Choose which type of ngmix catalog you are inputting
      # NB: for now, only Gauss, CM, and CM-MOF are accepted
      # catalog_type : 'mof'
      # catalog_type : 'cm'
      # catalog_type : 'gauss'
      # NOTE: If you don't specify an input type, the loader will attempt to determine the type
      # from the filename as standard ngmix catalogs include 'gauss', 'cm', or 'mof' in name. Still
      # safer to specify, however.
      
      # To use all bands: 
      # NOTE: Don't use this anymore! This is ONLY for ngmix-specific simulations. Will cause
      # Balrog to inject *all* bands in *all* chip images. Only here as a warning
      # bands : 'griz'

      # Set masking / selection thresholds for catalog
      #t_frac : 0.5
      #t_min : 0.001
      #t_max : 100
      #snr_min : 20.0

    #des_star_catalog :
      #base_dir : *star_dir
      #model_type :  'Model_16.5-26.5'
      #data_version : 'y3v02'

    nfw_halo :
        # NFW mass copied from demo9.yaml
        mass : 7e14
        conc : 4  # The concentration parameter = virial radius / NFW scale radius
        redshift : 0.25  # The redshift of the halo.

        # These next two are optional.  If they are omitted, then (0.3, 0.7) are actually the
        # defaults.  If you only specify one of them, the other is set so that the total is 1.
        # But you can define both values so that the total is not 1 if you want.
        # Radiation is assumed to be zero and dark energy equation of state w = -1.
        # If you want to include either radiation or more complicated dark energy models,
        # you'll need to define your own cosmology class and use that in a Python script.
        # There is no way to include them currently from a config script.
        omega_m : 0.3
        omega_lam : 0.7

        # Another optional parameter for nfw_halo is halo_pos, which specifies the location
        # of the halo with respect to the center of the image.  The default is (0,0).
        # halo_pos : 0,0


      

# The gal field defines what kind of galaxy profile to use.
gal :
    #type : List
    #items :
    #    - # Galaxy component
    #      type : ngmixGalaxy
    #    - # Star component
    # type : desStar

    type :  COSMOSChromaticGalaxy

    shear :
       type : NFWHaloShear

    magnification :
        type : NFWHaloMagnification
        
    redshift :
        type : RandomDistribution
        function : x**-1.5
        x_min: 0.3
        x_max: 2.0


    # NOTE: Here you would normally define various fields such as index to choose which galaxies
    # are injected. The balrog injection script takes care of position / index sampling, so
    # you will likely leave the rest of the field blank.

psf :
    # For DES chip images with PSFEx files
    # NOTE: In figure, Piff PSFs may be used instead
    type : DES_PSFEx

    # If for some reason you want to use a different PSF model, any standard GalSim
    # PSF's are allowed (but you might get a warning!)
    # type : Gaussian
    # sigma : 0.5  # arcsec
    # No need to specify a flux, since flux=1 is the right thing for a PSF.

stamp :
    # Nothing required here, but feel free to add additional config options
    gsparams :
      # fft size is the most likely change you'll want to make
      maximum_fft_size : *max_fft
    type :  COSMOSChromatic

image :
    # For injected images:
    type : Balrog # Same as AddOn, but with some additional input attributes and checking
    
    # Can add some of the command-line arguments here as well; see README
    # OK to pass either way or both, as long as they are consistent
    # geom_file : '/path/to/geom_file.fits'
    # tile_list : /path/to/tile_list.csv'
    # tile_dir : /path/to/tiles/'
    # psf_dir : 'psfs' # Default for DES; don't need to include

    # To use all bands:
    # NOTE: y-band currently not supported
    bands : 'griz'
    # To use a subset:
    # bands : 'g'
    
    #version : 'y3v02'
    version : 'testy'
    run_name : 'TEST'

    # Can choose to ignore existing image data and only include injected objects
    # inj_objs_only : True
    # Or if you want to include chip noise:
    # inj_obs_only : {val : True, noise : True}

    # Can inject objects onto a grid
    # NOTE: For now, grid parameters are hard coded including galaxy #
    # pos_sampling : grid
    
    # Load WCS from DES chip file
    wcs :
      type : Fits
      hdu : 1

    # Must set galaxy density or total number of injected galaxies per tile
    # NOTE: Set the desired FINAL density or galaxy count; the injection script
    # automatically calculates the injection # / realization given the inputs below.
    # gal_density : 10 # per arcmin^2
    n_galaxies : 10000 # per tile

    # Set the realizations to be done
    # NOTE: This replaces the old keyword `n_realizations` (although it will still be processed
    # correctly for now). You can pass a single realization value, a range using a dictionary
    # filled with min/max, or a list of individual values:
    # n_realizations : 1 # DEPRECATED!
    realizations : [3]
    # realizations : {'min' : 2, 'max' : 4}
    #realizations : [1, 3, 5]

    # Set the number of realizations / layers
    #n_realizations : 3
    # n_realizations : 1

    # TODO: In future, we should load these fields automatically in script.
    xsize: 2046 # DES nullwt chip
    ysize: 4094 # DES nullwt chip

    # Number of processors to be used on GalSim injection step
    #nproc : 2
    nproc : -1 # To use all available cores

# output :
# Can include parent-level output directory here as well
    # dir : '/path/to/outdir/'
